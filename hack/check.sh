#!/bin/bash

readonly reset=$(tput sgr0)
readonly red=$(tput setaf 1)
readonly green=$(tput setaf 2)
readonly blue=$(tput setaf 4)

exit_code=0
check_scope=$1
if [[ "${check_scope}" = "all" ]]; then
    echo "all"
    files=($(git ls-files | grep "\.go" | grep -v -e "^third_party" -e "^vendor"))
else
    files=($(git diff --cached --name-only --diff-filter ACM | grep "\.go" | grep -v -e "^third_party" -e "^vendor"))
fi

echo -e "${green}1. Formatting using goimports"
# Exclude auto generated
goimports -d $(find . -type f -name '*.go' -not -path "./graphql/*" -not -path "./third_party/*" -not -path "./vendor/*")
if [[ $? -eq 0 ]]; then
  echo -e "${blue}Done!"
else
  echo -e "${red}Please make sure your \$PATH already included \$GOPATH\\\bin\\\goimports*!"
  exit_code=1
fi 

if [[ ${exit_code} -eq 0 ]]; then
  echo -e "${green}2. Linting using golint"
  # Exclude auto generated
  for file in "${files[@]}"; do
    parent_dir=$(basename $(dirname ${file}))
    filename=$(basename ${file})
    if [[ ${parent_dir} =~ "graphql" ]]; then
      if [ ${filename} != "resolver.go" ] && [ ${filename} != "models_bridge.go" ]; then
        echo "${green}Ignore autogenerated file ${file}"
        continue
      fi
    fi

    out=$(golint ${file})
    if [[ $? -eq 0 ]]; then
      if [[ -n "${out}" ]]; then
        echo "${red}${out}"
        exit_code=1
      fi
    else
      echo -e "${red}Please make sure your \$PATH already included \$GOPATH\\\bin\\\golint*!"
      exit_code=1
    fi 
    
  done
fi

if [[ ${exit_code} -ne 0 ]]; then
    echo "${red}Fix errors before commit!"
else
    echo "${blue}Perfekt!"
fi
echo "${reset}"

exit ${exit_code}
